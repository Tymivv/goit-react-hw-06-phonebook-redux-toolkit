{"version":3,"sources":["components/Redux/Contacts/contactsSlice.js","components/Redux/store .js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.jsx","components/Servises/localStorage.js","index.js"],"names":["contactsSlice","createSlice","name","initialState","items","filter","reducers","setContacts","state","payload","addContacts","push","editContacts","idx","findIndex","city","id","deleteContacts","splice","changeFilter","actions","persistCitiesConfig","key","storage","whitelist","logger","createLogger","collapsed","getState","action","logEntry","error","timestamp","store","configureStore","reducer","contacts","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","devTools","process","persistor","persistStore","ContactForm","onSubmit","useState","setName","number","setNumber","className","e","preventDefault","type","pattern","title","required","value","onChange","target","ContactList","onDelete","useSelector","normalizedFilter","toLowerCase","nameContact","includes","filteredContacts","map","tel","onClick","Filter","dispatch","useDispatch","contactsActions","STORAGE_KEY","App","useEffect","forStoragContacts","JSON","parse","localStorage","getItem","setItem","stringify","some","alert","newContact","nanoid","console","log","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.275c67e9.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  items: [],\r\n  filter: '',\r\n};\r\n\r\nconst contactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState,\r\n  reducers: {\r\n    setContacts: (state, { payload }) => {\r\n      state.items = payload;\r\n    },\r\n\r\n    addContacts: (state, { payload }) => {\r\n      state.items.push(payload);\r\n    },\r\n\r\n    editContacts: (state, { payload }) => {\r\n      const idx = state.items.findIndex(city => city.id === payload.id);\r\n      state.items[idx] = payload;\r\n    },\r\n\r\n    deleteContacts: (state, { payload }) => {\r\n      const idx = state.items.findIndex(city => city.id === payload.id);\r\n      state.items.splice(idx, 1);\r\n    },\r\n\r\n    changeFilter: (state, { payload }) => {\r\n      state.filter = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setContacts,\r\n  addContacts,\r\n  editContacts,\r\n  deleteContacts,\r\n  changeFilter,\r\n} = contactsSlice.actions;\r\n\r\nexport default contactsSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { createLogger } from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport contactsReducer from './Contacts/contactsSlice';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, devToolsEnhancer());\r\n\r\n// export default store;\r\n\r\n/////////////////////////////////\r\nconst persistCitiesConfig = {\r\n  key: 'filter',\r\n  storage,\r\n  whitelist: ['filter'],\r\n};\r\n\r\nconst logger = createLogger({\r\n  collapsed: (getState, action, logEntry) => !logEntry.error,\r\n  timestamp: false,\r\n});\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(persistCitiesConfig, contactsReducer),\r\n  },\r\n\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import { useState } from \"react\";\r\nimport \"./ContactForm.css\";\r\n\r\nconst ContactForm = ({ onSubmit }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  ////// записує контакт\r\n\r\n  const handleChangeName = ({ target }) => {\r\n    const { value } = target;\r\n    setName(value);\r\n  };\r\n\r\n  const handleChangeNumber = ({ target }) => {\r\n    const { value } = target;\r\n    setNumber(value);\r\n  };\r\n\r\n  ////передає імя і тел\r\n  const handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit({ name, number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"heading\" onSubmit={handelSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            value={name}\r\n            onChange={handleChangeName}\r\n          />\r\n        </label>\r\n        <label>\r\n          Phone\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            value={number}\r\n            onChange={handleChangeNumber}\r\n          />\r\n        </label>\r\n        <button className=\"button8\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import './ContactList.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { contactsActions } from '../Redux/Contacts';\r\n\r\n  \r\n\r\n\r\nconst ContactList = ({  onDelete }) => {\r\n\r\n  const filter = useSelector(state => state.contacts.filter);\r\n  const contacts = useSelector(state => state.contacts.items);\r\n\r\n  const filteredContacts = () => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ nameContact }) =>\r\n      nameContact.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  };\r\n\r\n\r\n  return (\r\n\r\n\r\n    <ul className=\"list\">\r\n      {filteredContacts().map(({ id, nameContact, tel }) => (\r\n        <>\r\n          <li className=\"item\" key={id}>\r\n            {nameContact} : {tel}\r\n          </li>\r\n          <button className=\"button9\" type=\"button\" onClick={onDelete(id)}>\r\n            Delete {nameContact}\r\n          </button>\r\n        </>\r\n      ))}\r\n    </ul>\r\n  );\r\n\r\n  \r\n}\r\nexport default ContactList;\r\n","// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n//import { changeFilter } from '../Redux/Contacts/contactsActions';\r\nimport { contactsActions } from '../Redux/Contacts';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n\r\n  const filter = useSelector(state => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <label className=\"heading\">\r\n      Find contact by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n        required\r\n        value={filter}\r\n        onChange={e => dispatch(contactsActions.changeFilter(e.target.value))}\r\n      />\r\n    </label>\r\n  );\r\n\r\n  // Filter.propTypes = {\r\n  //   value: PropTypes.string,\r\n  //   // onChange: PropTypes.func,\r\n  // };\r\n};\r\nexport default Filter;\r\n","import { useEffect } from \"react\";\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport Filter from \"../Filter/Filter\";\r\nimport * as storage from \"../Servises/localStorage\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n//import { setContacts, addContacts, deleteContacts } from '../Redux/Contacts/contactsActions';\r\n//import * as actions from 'redux/cities/citiesActions';\r\nimport { contactsActions } from '../Redux/Contacts';\r\n\r\n\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst STORAGE_KEY = \"contacts\";\r\n\r\nconst App = () => {\r\n  // const [contacts, setContacts] = useState(storage.get(STORAGE_KEY) ?? []);\r\n  // const [filter, setFilter] = useState(\"\");\r\n\r\n  const contacts = useSelector(state => state.contacts.items);\r\n  const filter = useSelector(state => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const forStoragContacts = storage.get(STORAGE_KEY);\r\n    if (forStoragContacts) {\r\n      dispatch(contactsActions.setContacts(forStoragContacts));\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    storage.save(STORAGE_KEY, contacts);\r\n  }, [contacts]);\r\n\r\n  ////////додає контакт\r\n\r\n  const addContacts1 = ({ name, number }) => {\r\n    if (\r\n      contacts.some(\r\n        ({ id, nameContact, tel }) =>\r\n          nameContact.toLowerCase() === name.toLowerCase()\r\n      )\r\n    ) {\r\n      alert(`name \"${name}\" is already in list`);\r\n      return;\r\n    }\r\n    const newContact = {\r\n      id: nanoid(),\r\n      nameContact: name,\r\n      tel: number,\r\n    };\r\n    console.log(newContact);\r\n    // setContacts((prevContacts) => [...prevContacts, newContact]);\r\n    dispatch(contactsActions.addContacts(newContact));\r\n    console.log(contacts);\r\n  };\r\n  // шукає контакт\r\n\r\n  const handleFilterChange = (value) => {\r\n    filter(value);\r\n  };\r\n\r\n\r\n\r\n  ////видаляє контакт\r\n\r\n  // deleteContacts = id => {\r\n  //   this.setState(prevState => ({\r\n  //     contacts: prevState.contacts.filter(contact => contact.id !== id),\r\n  //   }));\r\n  // };\r\n\r\n  const deleteContacts1 = (id) => () => {\r\n    // console.log(contacts);\r\n    dispatch(contactsActions.deleteContacts(id));\r\n    // contacts((prevContacts) =>\r\n    //   prevContacts.filter((contact) => contact.id !== id)\r\n    // );\r\n  };\r\n  ///////////////\r\n  return (\r\n    <div>\r\n      <h1>Phonebooc</h1>\r\n      <ContactForm onSubmit={addContacts1} />\r\n\r\n      <Filter\r\n        value={filter}\r\n        onChange={(e) => handleFilterChange(e.target.value)}\r\n      />\r\n\r\n      <ContactList\r\n        onDelete={deleteContacts1}\r\n        // filteredContacts={getFilteredContacts()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const save = (key, value) => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst get = key => {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(key));\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst remove = key => {\r\n  try {\r\n    return localStorage.removeItem(key);\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport { get, save, remove };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store, persistor } from './components/Redux/store ';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}